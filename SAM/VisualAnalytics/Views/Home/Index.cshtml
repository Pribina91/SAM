@{
    ViewBag.Title = "Home Page";
}

@*<div id="lineGraph" style="width: 1000px"></div>*@

<hr>
<div style="display: inline-block;">
    @*<div id="radioButtons" style="display: block">
            <input id="Radio1" type="radio" title="SUM" value="SUM" />
            <input id="Radio2" type="radio" title="AVERAGE" value="AVERAGE" />
        </div>*@
    <div id="comboGraph" style="width: 800px; height: 400px; display: block"></div>
    <div id="consuptionGraph" style="width: 800px; height: 400px; display: block"></div>
</div>

<table id="spiralGraphTable" style="display: inline-block">
    <tr>
        <td>
            <canvas id="spiralGraph" width="500" height="500"></canvas>
        </td>
    <tr>
        <td>
            Begin offset:<input id="a" type="text" value='5' />
        </td>
    </tr>
    <tr>
        <td>
            Space: <input id="b" type="text" value='0.8' />
        </td>
    </tr>
    <tr>
        <td>
            Angle: <input id="angle" type="text" value='0.8975' />
        </td>
    </tr>
    <tr>
        <td>
            LineWidth: <input id="lineWidth" type="text" value='3' />
        </td>
    </tr>
    <tr>
        <td>
            <button id="draw">Draw</button>
            <button id="selectBtn" onclick=" selectHighlight() ">select</button>
        </td>
    </tr>
    </tr>
</table>
<div id="pieChart"></div>
<div id="calendar_basic" style="width: 1300px; height: 150px; display: block;"></div>
<hr>
<p>Weekday analysis</p>

<div id="chartMotion" style="display: block"></div>
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">

    function selectHighlight(chart00) {
        var x = chart00.getSelection();
        chart00.setSelection([{ 'row': 0, 'column': null }]);
        x = chart00.getSelection();
        chart00.setSelection([{ 'row': null, 'column': 0 }]);
        x = chart00.getSelection();
    }

    google.load("visualization", "1", { packages: ["calendar", "corechart", "treemap", 'motionchart'] });
    google.setOnLoadCallback(drawChart);

    var selectedData;
    var chartParameter;
    var dataTableParameter;
    var selectedDate;

    function getDateFromString(stringDate) {
        if (stringDate) {
            stringDate = stringDate.toString();
            var year = stringDate.substring(0, 4);
            var month = stringDate.substring(4, 6);
            var day = stringDate.substring(6, 8);

            return new Date(year, month - 1, day);

        }
        return null;

    }
    function createConsumptionDataTable(consData, dataTable, columnCount) {
        for (var i = 0; i < consData.length; i++) {
            var obj = consData[i];
            var dtt = getDateFromString(obj["IDDate"]);
            if (columnCount == 2) {
                dataTable.addRow([dtt, 0]);
            }
            else if (columnCount == 3) {
                dataTable.addRow([dtt, 0, 0]);
            }
            else if (columnCount == 4) {
                dataTable.addRow([dtt, 0, 0, 0]);
            }
            else if (columnCount == 5) {
                dataTable.addRow([dtt, 0, 0, 0, 0]);
            }
            else if (columnCount == 6) {//motion
                dataTable.addRow([dtt, 0, 0, 0, 0, 0]);
            }

        }

    }
    function addColumnData(consData, dataTable, jsonAttributeName, columnNumber) {
        for (var i = 0; i < consData.length; i++) {
            var obj = consData[i];
            var amt = obj[jsonAttributeName];
            dataTable.setCell(i, columnNumber, amt);
        }

    }

    function drawChart() {

        //WEATHER
        //var weatherData = google.visualization.arrayToDataTable([
        //    ['Month', 'Temperature', 'Humidity', 'Wind', 'Rain'],
        //    ['2004/05', 165, 938, 50, 614.6],
        //    ['2005/06', 135, 1120, 51, 682],
        //    ['2006/07', 157, 1167, 589, 623],
        //    ['2007/08', 139, 1110, 621, 609.4],
        //    ['2008/09', 136, 691, 366, 569.6]
        //        ]);

        //var jsonWeather = $.ajax({
        //    url: "home/getWeather",
        //    dataType: "json",
        //    async: false
        //}).responseJSON;

        //function drawWeatherChart() {
        //    var weatherData = new google.visualization.DataTable();
        //    weatherData.addColumn({ type: 'datetime', id: 'Date' });
        //    weatherData.addColumn({ type: 'number', id: 'Temperature' });
        //    weatherData.addColumn({ type: 'number', id: 'Humidity' });
        //    // weatherData.addColumn({ type: 'number', id: 'Wind' });
        //    weatherData.addColumn({ type: 'number', id: 'Rain' });

        //    for (var i = 0; i < jsonWeather.length; i++) {
        //        var obj = jsonWeather[i];
        //        //for (var key in obj) {
        //        //var attrName = key;
        //        //var attrValue = obj[key];
        //        var y = new Date(parseInt(obj["dtt"].substr(6)));
        //        var temperature = obj["temperature"];
        //        var humidity = obj["humidity"];
        //        //var wind = obj["wind"];
        //        var rain = obj["rain"];

        //        weatherData.addRow([
        //            y
        //            , temperature
        //            , humidity
        //            //, wind
        //            , rain]);
        //        //}
        //    }

        //    var weatherOptions = {
        //        title: 'Weather',
        //        hAxis: { title: "Date" },
        //        seriesType: "bars",
        //        series: {
        //            2: { type: "bars" }
        //           , 0: { type: "line" }
        //        },
        //        legend: { position: 'bottom' }

        //    };

        //    var weatherChart = new google.visualization.ComboChart(document.getElementById('weatherGraph'));
        //    weatherChart.draw(weatherData, weatherOptions);
        //}

        //drawWeatherChart();

        //CONSUPTION line chart
        var jsonConsuption = $.ajax({
            url: "Home/getDailyPlaceTable?Type=SUM",
            dataType: "json",
            async: false
        }).responseJSON;

        //var jsonConsuptionModelSum = $.ajax({
        //    url: "Home/getDailyModelTable?Type=SUM&idDistrict=62",
        //    dataType: "json",
        //    async: false
        //}).responseJSON;

        var jsonConsuptionModelAverage = $.ajax({
            url: "Home/getFittedModelTable?Type=SUM&idDistrict=62",
            dataType: "json",
            async: false
        }).responseJSON;

        var jsonOutliers = $.ajax({
            url: "Home/getBiggestOutliers?Type=SUM&weatherDependency=000000&IDConsuptionPlace=1622",
            dataType: "json",
            async: false
        }).responseJSON;

        function drawComboVisualization() {
            // Some raw data (not necessarily accurate)
            var dataTableCombo = new google.visualization.DataTable();

            dataTableCombo.addColumn({ type: 'datetime', id: 'Date' });
            dataTableCombo.addColumn({ type: 'number', id: 'AvgAmount', label: 'District Model' });
            //dataTableCombo.addColumn({ type: 'number', id: 'SumAmount', label: 'Sum Model' });
            dataTableCombo.addColumn({ type: 'number', id: 'placeAmount', label: 'Place Consumtion' });
            //TODO add outlier column

            createConsumptionDataTable(jsonConsuptionModelAverage, dataTableCombo, 3);
            addColumnData(jsonConsuptionModelAverage, dataTableCombo, "Amount", 1);
            // addColumnData(jsonConsuptionModelSum, dataTableCombo, "Amount", 2);
            addColumnData(jsonConsuption, dataTableCombo, "Amount", 2);

            function addOutlier(JsonData, outlierLimit) {
                for (var i = 0; i < outlierLimit; i++) {

                }
            }

            addOutlier(jsonOutliers, 5);
            /*[
          ['Month', 'Bolivia', 'Ecuador', 'Madagascar', 'Papua New Guinea', 'Rwanda', 'Average'],
          ['2004/05', 165, 938, 522, 998, 450, 614.6],
          ['2005/06', 135, 1120, 599, 1268, 288, 682],
          ['2006/07', 157, 1167, 587, 807, 397, 623],
          ['2007/08', 139, 1110, 615, 968, 215, 609.4],
          ['2008/09', 136, 691, 629, 1026, 366, 569.6]
        ]);*/

            var options = {
                title: 'Consumtion compared to district models',
                vAxis: { title: "Amount" },
                hAxis: { title: "Date" },
                seriesType: "line",
                //series: { 5: { type: "line" } }
            };

            var chart = new google.visualization.ComboChart(document.getElementById('comboGraph'));
            chart.draw(dataTableCombo, options);
        }

        drawComboVisualization();

        //jsonConsuption
        //var dataConsMatrix = [];
        function drawConsuptionChart(jsonConsuption) {
            var dataTableConsuption = new google.visualization.DataTable();
            dataTableConsuption.addColumn({ type: 'datetime', id: 'Date' });
            dataTableConsuption.addColumn({ type: 'number', id: 'avgAmount', label: 'ConsumptionPlace' });

            createConsumptionDataTable(jsonConsuption, dataTableConsuption, 2);
            addColumnData(jsonConsuption, dataTableConsuption, "Amount", 1);

            //for (var i = 0; i < jsonConsuption.length; i++) {
            //    var obj = jsonConsuption[i];
            //    var dtt = getDateFromString(obj["IDDate"]);
            //    var amt = obj["Amount"];
            //    dataTableConsuption.addRow([dtt, amt]);
            //}

            var optionsConsuption = {
                title: 'Overal consuption',
                curveType: 'function'
            };

            var chartConsuption = new google.visualization.LineChart(document.getElementById('consuptionGraph'));

            chartConsuption.draw(dataTableConsuption, optionsConsuption);

            var chartParameter = chartConsuption;
            var dataTableParameter = dataTableConsuption;

            function selectHandler() {
                var selection = chartParameter.getSelection();
                // .setSelection(table.getSelection());
                var selectedRow = selection[0]["row"];
                var selectedColumn = selection[0]["column"];
                selectedData = selectedRow; // dataTableParameter.getValue(selectedRow, selectedColumn);
                selectedDate = jsonConsuption[selectedRow]["IDDate"];
                spiralGraphDraw();
                drawPieChart(selectedDate);
                //drawCalendarChart();
            }

            google.visualization.events.addListener(chartConsuption, 'select', selectHandler);

        }

        drawConsuptionChart(jsonConsuption);

        // The selection handler.
        // Loop through all items in the selection and concatenate
        // a single message from all of them.

        //SPIRAL

        var c = document.getElementById('spiralGraph');
        var context = c.getContext("2d");
        var centerx = context.canvas.width / 2;
        var centery = context.canvas.height / 2;

        var maxAmount = Math.max.apply(Math, jsonConsuption.map(function (o) { return o.Amount; }));
        var minAmount = Math.min.apply(Math, jsonConsuption.map(function (o) { return o.Amount; }));

        function spiralGraphDraw() {
            a = parseFloat($('#a').val());
            b = parseFloat($('#b').val());
            angl = parseFloat($('#angle').val());
            context.clearRect(0, 0, 300, 300);

            context.beginPath();
            context.rect(0, 0, context.canvas.width, context.canvas.width);
            context.fillStyle = 'black'
            context.fill();
            context.stroke();

            var lastX = centerx + (a + b * angl) * Math.cos(angl);
            var lastY = centery + (a + b * angl) * Math.sin(angl);

            for (i = 0; i < jsonConsuption.length; i++) {
                context.beginPath();
                context.moveTo(lastX, lastY);
                angle = angl * i;
                x = centerx + (a + b * angle) * Math.cos(angle);
                y = centery + (a + b * angle) * Math.sin(angle);
                var color = ((jsonConsuption[i]["Amount"] - minAmount) / (maxAmount - minAmount)) * 255;
                var day = jsonConsuption[i]["IDDate"] % 100;
                var clr = "";
                if (selectedDate && selectedDate == jsonConsuption[i]["IDDate"]) {
                    context.lineWidth = (parseFloat($('#lineWidth').val())) + 3;
                    context.strokeStyle = 'yellow';
                    context.lineTo(x, y);
                    context.lineCap = 'square';
                    context.stroke();
                }
                if (day == 1) {
                    clr = '#FF0000';

                } else {
                    var col = parseInt(color.toString()).toString(16);
                    if (col.length == 1) {
                        col = "0" + col;
                    }
                    if (col.length > 2) {
                        col = "00";
                    }
                    clr = "#00" + col + '00';
                }

                //  var clr = "#00" + parseInt(color.toString()).toString(16) + '00';
                context.lineWidth = parseFloat($('#lineWidth').val());
                context.strokeStyle = clr;
                context.lineTo(x, y);
                context.lineCap = 'butt';
                context.stroke();
                lastX = x;
                lastY = y;
            }

        }

        $('#draw').click(spiralGraphDraw());

        //g3 = new Dygraph(
        //    document.getElementById("lineGraph"),
        //    jsonConsuption,
        //    {
        //        rollPeriod: 7,
        //        showRoller: true
        //    }
        //    );

        //CALENDAR chart
        var jsonEvents = $.ajax({
            url: "home/getEvents",
            dataType: "json",
            async: false
        }).responseJSON;

        function drawCalendarChart() {
            var dataTableCalendar = new google.visualization.DataTable();
            dataTableCalendar.addColumn({ type: 'datetime', id: 'Date' });
            dataTableCalendar.addColumn({ type: 'number', id: 'importance' });

            var chart1 = new google.visualization.Calendar(document.getElementById('calendar_basic'));

            for (var i = 0; i < jsonEvents.length; i++) {
                var obj = jsonEvents[i];
                //for (var key in obj) {
                //var attrName = key;
                //var attrValue = obj[key];
                var dtt = getDateFromString(obj["IDDate"]);
                var imp = obj["importance"];
                dataTableCalendar.addRow([dtt, imp]);

                var testDate = getDateFromString(selectedDate);
                var a = +dtt;
                var b = getDateFromString(selectedDate);
                b = +b;
                if (selectedDate && a === b) {
                    //var temp = chart1.getSelection();
                    //chart1.setSelection([{ 'row': i, 'column': null }]);
                }

                //}
            }

            var options1 = {
                title: "Calendar",
                height: 150,
                colorAxis: { minValue: 0, colors: ['#000000', '#FF0000'] },
                calendar: {
                    cellColor: {
                        stroke: '#76a7fa',
                        strokeOpacity: 0.5,
                        strokeWidth: 1,
                    }
                }
            };

            chart1.draw(dataTableCalendar, options1);
            selectHighlight(chart1);
        }

        drawCalendarChart();

        ////PIECHART

        function drawPieChart(selDate) {
            var pieDataTable = new google.visualization.DataTable();
            pieDataTable.addColumn({ type: 'string', id: 'Feature' });
            pieDataTable.addColumn({ type: 'number', id: 'outlierness' });

            for (var i = 0; i < jsonOutliers.length; i++) {
                var obj = jsonOutliers[i];
                //for (var key in obj) {
                //var attrName = key;
                //var attrValue = obj[key];
                var order = obj["seriesNumber"];
                var IDDate = jsonConsuption[order]["IDDate"];
                if (IDDate == selDate) {
                    
                    var outliernessList = obj["outlierness"];
                    for (var i = 0; i < outliernessList.length; i++) {
                        var str = toString(obj["weatherDependency"][i][0]);
                        pieDataTable.addRow([toString(i), outliernessList[i]]);
                    }
                    break;

                }

            }
            var pieChartOulier = new google.visualization.PieChart(document.getElementById('pieChart'));
            var pieOptions = {};
            pieChartOulier.draw(pieDataTable, pieOptions);
        }

        var dataMotion = new google.visualization.DataTable();
        dataMotion.addColumn('string', 'WeekDay');
        dataMotion.addColumn('date', 'Date');
        dataMotion.addColumn('number', 'Amount');
        dataMotion.addColumn('number', 'Temperature');
        dataMotion.addColumn('number', 'Rainfall');
        dataMotion.addColumn('number', 'Solar Flux');

        //var jsonBigTable = $.ajax({
        //    url: "home/getBigTable",
        //    dataType: "json",
        //    async: false
        //}).responseJSON;

        var weekday = new Array(7);
        weekday[0] = "Sunday";
        weekday[1] = "Monday";
        weekday[2] = "Tuesday";
        weekday[3] = "Wednesday";
        weekday[4] = "Thursday";
        weekday[5] = "Friday";
        weekday[6] = "Saturday";

        ;

        for (var i = 0; i < jsonConsuption.length; i++) {
            var obj = jsonConsuption[i];
            var dtt = getDateFromString(obj["IDDate"]);
            dataMotion.addRow([weekday[dtt.getDay()], dtt, 0, 0, 0, 0]);
        }

        addColumnData(jsonConsuption, dataMotion, "Amount", 2);
        addColumnData(jsonConsuption, dataMotion, "Temperature", 3);
        addColumnData(jsonConsuption, dataMotion, "Rain", 4);
        addColumnData(jsonConsuption, dataMotion, "Solar", 5);

        var chartMotion = new google.visualization.MotionChart(document.getElementById('chartMotion'));

        chartMotion.draw(dataMotion, { width: 1000, height: 500 });

    }
</script>

<hr />